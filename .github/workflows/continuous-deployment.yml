name: Memento API - Continuous Deployment
on:
    push:
      branches:
        - main
#    pull_request:
#      branches:    
#        - main
#      types:
#        - closed

jobs:
    build:
        name: Build & Push Docker Image
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Get Commit Message
              run: |
                COMMIT_MESSAGE=$(jq -r .head_commit.message $GITHUB_EVENT_PATH)
                echo "Commit Message: $COMMIT_MESSAGE"

                IMAGE_VERSION=$(jq -r .version package.json)
                echo "Current version: $IMAGE_VERSION"

                IFS='.' read -r major minor patch <<< "$IMAGE_VERSION"

                if [[ $COMMIT_MESSAGE == feature* ]]; then
                    packageJsonVersion="${major}.$((minor + 1)).$patch"
                elif [[ $COMMIT_MESSAGE == bugfix* || $COMMIT_MESSAGE == hotfix* ]]; then
                    packageJsonVersion="${major}.$minor.$((patch + 1))"
                fi

                echo "New package.json version: $packageJsonVersion"

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            
            - name: Set up Image tag
              id: image_version
              run: |
                echo "IMAGE_VERSION=v$(jq -r .version package.json)" >> $GITHUB_ENV


#            - name: Build, tag, and push image to Amazon ECR
#              env:
#                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#                  ECR_REPOSITORY: test-dani-repo
#                  IMAGE_VERSION: ${{ env.IMAGE_VERSION }}
#              run: |
#                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_VERSION .
#                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_VERSION
#        outputs:
#          image_version: ${{ env.IMAGE_VERSION }}
#
#    deploy_to_dev:
#        name: Deploy to Dev
#        runs-on: ubuntu-latest
#        needs: build
#        steps:   
#            - name: Deploy to Dev
#              env: 
#                IMAGE_VERSION: ${{needs.build.outputs.image_version}}
#              run: |
#                echo "DOCKER IMAGE TO DEPLOY $IMAGE_VERSION"
#                eval "$(ssh-agent -s)"
#                echo "${{ secrets.PIPELINE_DEPLOY_KEY }}" > pipeline_deploy_key
#                chmod 600 pipeline_deploy_key
#                ssh-add ./pipeline_deploy_key
#                git config --global user.email "you@example.com"
#                git config --global user.name "Automated Pipeline Deployer"
#                git clone git@github.com:Matech-Studios/matech-memento-k8s.git
#                cd matech-memento-k8s 
#                cd v2/memento-api/staging 
#                cp -f values.yaml-DEFAULT values.yaml
#                sed -i "s/##VERSION##/$IMAGE_VERSION/g" values.yaml
#                git add *
#                git commit -m "version $IMAGE_VERSION"
#                git push
#
#    deploy_to_prod:
#        name: Deploy to Production
#        runs-on: ubuntu-latest
#        needs: [ build, deploy_to_dev ]
#        environment: 'Production'
#        steps:
#            - name: Deploy to Production
#              env: 
#                IMAGE_VERSION: ${{needs.build.outputs.image_version}}
#              run: |
#                echo "DOCKER IMAGE TO DEPLOY $IMAGE_VERSION"
#                eval "$(ssh-agent -s)"
#                echo "${{ secrets.PIPELINE_DEPLOY_KEY }}" > pipeline_deploy_key
#                chmod 600 pipeline_deploy_key
#                ssh-add ./pipeline_deploy_key
#                git config --global user.email "you@example.com"
#                git config --global user.name "Automated Pipeline Deployer"
#                git clone git@github.com:Matech-Studios/matech-memento-k8s.git
#                cd matech-memento-k8s 
#                cd v2/memento-api/production 
#                cp -f values.yaml-DEFAULT values.yaml
#                sed -i "s/##VERSION##/$IMAGE_VERSION/g" values.yaml
#                git add *
#                git commit -m "version $IMAGE_VERSION"
#                git push
