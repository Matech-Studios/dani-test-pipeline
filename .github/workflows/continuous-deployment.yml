name: DANI TEST - Continuous Deployment
on:
  #  push:
  #    branches:
  #      - main
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.VERSION_DEPLOY_TOKEN }}

      - name: Modify version
        uses: ./.github/actions/generate-versioning
        with:
          version_deploy_key: ${{ secrets.VERSION_DEPLOY_KEY }}
          version_deploy_token: ${{ secrets.VERSION_DEPLOY_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Image tag
        id: image_version
        run: |
          echo "IMAGE_VERSION=v$(jq -r .version package.json)" >> $GITHUB_ENV

      #- name: Build, tag, and push image to Amazon ECR
      #  env:
      #      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #      ECR_REPOSITORY: test-dani-repo
      #      IMAGE_VERSION: ${{ env.IMAGE_VERSION }}
      #  run: |
      #      docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_VERSION .
      #      docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_VERSION
    outputs:
      image_version: ${{ env.IMAGE_VERSION }}

#  deploy_to_dev:
#    name: Deploy to Dev
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Deploy
#        uses: ./.github/actions/deploy-argo
#        with:
#          image_version: ${{needs.build.outputs.image_version}}
#          pipeline_deploy_key: ${{ secrets.PIPELINE_DEPLOY_KEY }}
#          environment: development
#          application_name: memento-api
#
#  deploy_to_prod:
#      name: Deploy to Production
#      runs-on: ubuntu-latest
#      needs: [ build, deploy_to_dev ]
#      environment: 'Production'
#      steps:
#        - name: Checkout
#          uses: actions/checkout@v3
#
#        - name: Deploy
#          uses: ./.github/actions/deploy-argo
#          with:
#            image_version: ${{needs.build.outputs.image_version}}
#            pipeline_deploy_key: ${{ secrets.PIPELINE_DEPLOY_KEY }}
#            environment: production
#            application_name: memento-api
